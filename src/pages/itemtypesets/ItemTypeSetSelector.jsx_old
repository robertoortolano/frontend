import React, { useEffect, useState } from "react";
import api from "../api/api";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { ChevronDown, ChevronRight } from "lucide-react";
import layout from "../../styles/common/Layout.module.css";
import buttons from "../../styles/common/Buttons.module.css";
import alert from "../../styles/common/Alerts.module.css";
import table from "../../styles/common/Tables.module.css";
import utilities from "../../styles/common/utilities.module.css";


export default function ItemTypeSetSelector({ onUse }) {
  const { id } = useParams(); // projectId
  const location = useLocation();
  const token = location.state?.token || localStorage.getItem("token");

  const [usedItemTypeSet, setUsedItemTypeSet] = useState(null);
  const [availableItemTypeSets, setAvailableItemTypeSets] = useState([]);
  const [expandedSets, setExpandedSets] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const navigate = useNavigate();

  const handleUseSet = async (set) => {
    if (isSubmitting) return; // evita doppio click

    setIsSubmitting(true);
    try {
      await axios.patch(
        `http://localhost:8080/api/projects/${id}/item-type-set/${set.id}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      navigate(-1);
    } catch (err) {
      console.error("Errore durante l'assegnazione dell'ItemTypeSet", err);
      alert("Errore durante l'assegnazione del set.");
    } finally {
      setIsSubmitting(false);
    }
  };



  useEffect(() => {
    const fetchSets = async () => {
      try {
        const headers = { Authorization: `Bearer ${token}` };

        const projectRes = await axios.get(
          `http://localhost:8080/api/projects/${id}`,
          { headers }
        );
        setUsedItemTypeSet(projectRes.data.itemTypeSet);

        const availableRes = await axios.get(
          `http://localhost:8080/api/projects/${id}/available-item-type-sets`,
          { headers }
        );
        setAvailableItemTypeSets(availableRes.data);
      } catch (err) {
        console.error("Errore nel caricamento", err);
        setError(err.response?.data?.message || "Errore nel caricamento");
      } finally {
        setLoading(false);
      }
    };

    if (token) fetchSets();
  }, [token]);

  const toggleExpand = (setId) => {
    setExpandedSets((prev) => ({
      ...prev,
      [setId]: !prev[setId],
    }));
  };

  const renderSet = (set, showUseButton = true, highlight = false) => (
    <li
      key={set.id}
      className={`${layout.block} ${highlight ? layout.highlightBorder : ""}`}
    >
      <div
        className={`${layout.blockHeader} cursor-pointer`}
        onClick={() => toggleExpand(set.id)}
      >
        <h2 className={layout.blockTitleBlue}>{set.name}</h2>
        {expandedSets[set.id] ? <ChevronDown /> : <ChevronRight />}
      </div>

      {expandedSets[set.id] && (
        <div className={utilities.mt4}>
          {set.entries?.length > 0 ? (
            <table className={table.table}>
              <thead>
                <tr>
                  <th>Item Type</th>
                  <th>Category</th>
                </tr>
              </thead>
              <tbody>
                {set.entries.map((entry) => (
                  <tr key={entry.itemTypeId}>
                    <td>{entry.itemTypeName}</td>
                    <td>{entry.category}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p className={layout.paragraphMuted}>No entries in this set.</p>
          )}

          {showUseButton && (
            <div className={layout.buttonRow}>
              <button
                className={`${buttons.button}`}
                onClick={() => handleUseSet(set)}
                disabled={isSubmitting}
              >
                {isSubmitting ? "Please wait..." : "Use"}
              </button>
            </div>
          )}
        </div>
      )}
    </li>
  );

  return (
    <div className={layout.container}>
      <h1 className={layout.title}>Select an Item Type Set</h1>

      {loading ? (
        <p className={layout.loading}>Loading item type sets...</p>
      ) : error ? (
        <p className={alert.error}>{error}</p>
      ) : (
        <>
          {usedItemTypeSet && (
            <div className={utilities.mt4}>
              <h2 className={layout.subTitleGreen}>
                Item Type Set assegnato al progetto:
              </h2>
              <ul>{renderSet(usedItemTypeSet, false, true)}</ul>
            </div>
          )}

          <h2 className={layout.blockTitleBlue}>
            Altri set disponibili:
          </h2>
          <ul className={layout.verticalList}>
            {availableItemTypeSets.length > 0 ? (
              availableItemTypeSets.map((set) => renderSet(set))
            ) : (
              <p className={layout.paragraphMuted}>Nessun set disponibile.</p>
            )}
          </ul>
          <div className={layout.buttonRow}>
            <button
              type="button"
              onClick={() => navigate(-1)}
              className={`${buttons.button} ${buttons.secondary}`}
            >
              Cancel
            </button>
          </div>

        </>
      )}
    </div>
  );
}
